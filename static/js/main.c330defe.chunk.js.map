{"version":3,"sources":["components/task-item/task-item.tsx","components/tasksday/taskday.tsx","components/navigation/navigation.tsx","components/app/app.tsx","components/index.tsx","serviceWorker.ts","index.tsx"],"names":["getTypefromNumber","type","getClassfromNumber","imageProps","imageFit","ImageFit","centerContain","width","height","initializeIcons","TaskItem","task","children","useBoolean","isCalloutVisible","toggleIsCalloutVisible","toggle","isOpen","openPanel","setTrue","dismissPanel","setFalse","key","className","style","boxShadow","DefaultEffects","elevation16","onMouseEnter","onMouseLeave","onClick","Stack","horizontal","gap","Text","variant","fontWeight","Panel","headerText","onDismiss","closeButtonAriaLabel","isLightDismiss","TextField","label","Image","src","alt","stackTokens","childrenGap","TaskDay","day","name","Separator","horizontalAlign","tokens","tasks","length","map","Label","addTasks","count","i","push","toString","getRandomIntInclusive","min","max","Math","ceil","floor","random","days","labelStyles","root","marginTop","Navigation","Pivot","aria-label","PivotItem","headerButtonProps","CommandBar","items","dir","styles","getTheme","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c330defe.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport { Stack, Image, DefaultEffects, Text, Separator, ITextStyles, Callout, getTheme, mergeStyleSets, FontWeights, Link, DefaultButton, Panel, ImageFit, IImageProps, initializeIcons, TextField } from '@fluentui/react'\r\nimport { useBoolean, useId } from '@uifabric/react-hooks';\r\n\r\nimport './task-item.css'\r\nimport { Task } from '../navigation/navigation';;\r\n\r\ntype TaskProp = {\r\n    task: Task\r\n}\r\n\r\nfunction getTypefromNumber(type: number) {\r\n    switch (type) {\r\n        case 2:\r\n            return 'App.to di Vendita';\r\n        case 3:\r\n            return 'App.to di Acquisto';\r\n        default:\r\n            return 'Incontro con Fornitore';\r\n            break;\r\n    }\r\n}\r\n\r\nfunction getClassfromNumber(type: number) {\r\n    switch (type) {\r\n        case 2:\r\n            return 'taskCardHeaderYellow';\r\n        case 3:\r\n            return 'taskCardHeaderGreen';\r\n        default:\r\n            return 'taskCardHeaderBlue';\r\n            break;\r\n    }\r\n}\r\n\r\nconst imageProps: Partial<IImageProps> = {\r\n    imageFit: ImageFit.centerContain,\r\n    width: 200,\r\n    height:200\r\n};\r\n\r\n// Initialize icons in case this example uses them\r\ninitializeIcons();\r\n\r\nconst TaskItem: FunctionComponent<TaskProp> = ({ task, children }) => {\r\n    const [isCalloutVisible, { toggle: toggleIsCalloutVisible }] = useBoolean(false);\r\n    const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false);\r\n    return (\r\n        <div key={task.key} className=\"taskCard\" style={{ boxShadow: DefaultEffects.elevation16 }} >\r\n            <div className={getClassfromNumber(task.type)}>\r\n                <div className=\"taskCardContent\" onMouseEnter={toggleIsCalloutVisible} onMouseLeave={toggleIsCalloutVisible} onClick={openPanel}>\r\n                    <Stack horizontal gap='10px'>\r\n                        <Text variant=\"small\" >10:30 - 12:30</Text>\r\n                        <Text variant=\"small\" style={{ fontWeight: 'bold' }} >{getTypefromNumber(task.type)}</Text><br />\r\n                    </Stack>\r\n\r\n\r\n                    <Text variant=\"small\" >Gabriele,Mattea</Text><br />\r\n                    <Text variant=\"small\" >Imm. Fantino Damiano in via Marco Polo</Text><br />\r\n                    {isCalloutVisible && <div>\r\n                        <Text variant=\"small\" >Informazione 1</Text><br />\r\n                        <Text variant=\"small\" >Informazione 2</Text><br />\r\n                    </div>}\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <Panel\r\n                headerText={getTypefromNumber(task.type)}\r\n                isOpen={isOpen}\r\n                onDismiss={dismissPanel}\r\n                // You MUST provide this prop! Otherwise screen readers will just say \"button\" with no label.\r\n                closeButtonAriaLabel=\"Close\"\r\n                isLightDismiss\r\n            >\r\n                <Stack gap='1px'>\r\n                    <Text variant=\"medium\" >10:30 - 12:30</Text>\r\n                    <Text variant=\"large\" style={{ fontWeight: 'bold' }} ></Text><br />\r\n\r\n                    <TextField label=\"Testo\" ></TextField>\r\n                    <Text variant=\"medium\" >Gabriele,Mattea</Text><br />\r\n                    <Text variant=\"medium\" >Imm. Fantino Damiano in via Marco Polo</Text><br />\r\n                    <Image  {...imageProps} src=\"https://images.unsplash.com/photo-1580587771525-78b9dba3b914?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1267&q=80\"\r\n                        alt='Immagine di prova'\r\n                    />\r\n                    <Text variant=\"medium\" >Informazione 1</Text><br />\r\n                    <Text variant=\"medium\" >Informazione 2</Text><br />\r\n                </Stack>\r\n\r\n              \r\n            </Panel>\r\n        </div >\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default TaskItem;\r\n","import React, { FunctionComponent, useState } from 'react';\r\nimport { Stack, Label, DefaultEffects, Text, Separator, ITextStyles, Callout, getTheme, mergeStyleSets, FontWeights, Link, DefaultButton, TagItem, IStackTokens } from '@fluentui/react'\r\nimport { useBoolean, useId } from '@uifabric/react-hooks';\r\n\r\nimport './taskday.css'\r\nimport { Day, Task } from '../navigation/navigation';\r\nimport App from '../app/app';\r\nimport TaskItem from '../task-item/task-item';\r\n\r\ntype TaskDayProp = {\r\n    day: Day\r\n}\r\n\r\nconst stackTokens: IStackTokens = { childrenGap: 5 };\r\n\r\nconst TaskDay: FunctionComponent<TaskDayProp> = ({ day, children }) => {\r\n    return (\r\n        <>\r\n            <div >\r\n                \r\n                <div>\r\n                    <Text variant=\"large\" >{day.name}</Text>\r\n                </div>\r\n               \r\n                <Separator >\r\n                <Stack horizontal gap=\"2px\" horizontalAlign=\"center\" tokens={stackTokens}>\r\n                    <Text className=\"badge-green\" variant=\"small\">10</Text>\r\n                    <Text className=\"badge-yellow\" variant=\"small\">5</Text>\r\n                    <Text className=\"badge-blue\"variant=\"small\">2</Text>\r\n\r\n                </Stack>\r\n                </Separator>\r\n                <div>\r\n                    <Stack gap='10'>\r\n                        {day.tasks.length > 0 ? day.tasks.map((task: \r\n                        Task) => (\r\n                            <TaskItem task={task}></TaskItem>\r\n                        )) :\r\n                            <Label>Nessun evento</Label>}\r\n\r\n\r\n\r\n                    </Stack>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default TaskDay;\r\n","import React from 'react';\r\nimport './navigation.css'\r\nimport { Pivot, ICommandBarItemProps, PivotItem, Label, IStyleSet, ILabelStyles, CommandBar } from '@fluentui/react'\r\nimport TaskDay from '../tasksday/taskday';\r\nimport { type } from 'os';\r\n\r\n\r\nexport class Task {\r\n    name: string = '';\r\n    className: string = 'taskCardHeader';\r\n    type: number = 0;\r\n    key: string = '';\r\n}\r\n\r\nfunction addTasks(count: number): Task[] {\r\n    const tasks: Task[] = [];\r\n    for (var i = 0; i < count; i++) {\r\n        tasks.push({\r\n            key: i.toString(),\r\n            name: 'Task ' + i,\r\n            className: 'taskCardHeader',\r\n            type: getRandomIntInclusive(1,3),\r\n        })\r\n    }\r\n\r\n    return tasks;\r\n}\r\n\r\nfunction getRandomIntInclusive(min: number, max: number) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min; //Il max è incluso e il min è incluso \r\n}\r\n\r\nexport class Day {\r\n    tasks: Task[] = [];\r\n    name: string = \"\";\r\n    key: number = 0;\r\n}\r\n\r\nconst days: Day[] = [{\r\n    name: 'Lunedì 21 Ago ',\r\n    tasks: addTasks(100),\r\n    key: 0,\r\n}, {\r\n    name: 'Martedì 22 Ago',\r\n    tasks: addTasks(30),\r\n    key: 1,\r\n},\r\n{\r\n    name: 'Mercoledì 23 Ago',\r\n    tasks: addTasks(10),\r\n    key: 2,\r\n}, {\r\n    name: 'Giovedì 24 Ago',\r\n    tasks: addTasks(40),\r\n    key: 3,\r\n}, {\r\n    name: 'Venerdì 25 Ago',\r\n    tasks: addTasks(3),\r\n    key: 4,\r\n}, {\r\n    name: 'Sabato 26 Ago',\r\n    tasks: addTasks(22),\r\n    key: 5,\r\n}];\r\n\r\nclass MenuItem {\r\n    title = '';\r\n}\r\n\r\nconst labelStyles: Partial<IStyleSet<ILabelStyles>> = {\r\n    root: { marginTop: 10 },\r\n};\r\n\r\nconst menuItems: ICommandBarItemProps[] = [\r\n    { name: 'Agenda', key: 'tasks' },\r\n    { name: 'Da Fare', key: 'todo' },\r\n    { name: 'Chiamate', key: 'chiamate' },\r\n]\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <nav>\r\n            <Pivot aria-label=\"Basic Pivot Example\">\r\n                <PivotItem\r\n                    headerText=\"Agenda\"\r\n                    headerButtonProps={{\r\n                        'data-order': 1,\r\n                        'data-title': 'Agenda',\r\n                    }}\r\n                >\r\n                    <CommandBar items={[]}></CommandBar>\r\n                    <div className=\"ms-Grid\" dir=\"ltr\">\r\n                        <div className=\"ms-Grid-row\">\r\n                            {days.length > 0 ? days.map((day: any) => (\r\n                                <div key={day.name} className=\"ms-Grid-col ms-sm6 ms-md4 ms-lg2\">\r\n                                    <TaskDay day={day} />\r\n                                </div>\r\n                            )) :\r\n                                <Label>Days list is empty...</Label>}\r\n                        </div>\r\n                    </div>\r\n                </PivotItem>\r\n                <PivotItem headerText=\"Da Fare\">\r\n                    <Label styles={labelStyles}>Da fare</Label>\r\n                </PivotItem>\r\n                <PivotItem headerText=\"Chiamate\">\r\n                    <Label styles={labelStyles}>Chiamate</Label>\r\n                </PivotItem>\r\n            </Pivot>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\nimport { Text, Link, DefaultButton, FontWeights, getTheme, mergeStyleSets, Stack } from '@fluentui/react';\nimport Navigation from '../navigation/navigation';\n\nimport './app.css';\n\nconst theme = getTheme();\n\nfunction App() {\n \n  return (\n    <div className=\"App\">\n     <Navigation></Navigation>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","import App from \"./app/app\";\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components';\nimport 'office-ui-fabric-react/dist/css/fabric.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}